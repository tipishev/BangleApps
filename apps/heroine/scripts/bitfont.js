// autogenerated with generate_bitfont.py at 2023-01-22 13:41:27.654714


// explained by the position of game canvas offset
// TODO deduplicate with tileset.js constants
// maybe via a global settings module
const GLOBAL_MARGIN_LEFT = 8;
const GLOBAL_MARGIN_TOP = 32;

// TODO look into atob/btoa compression speedup
const BG_FONT = E.toString([
0x0, 0x0, 0x0, 0x0, //  
0xff, 0x8b, 0x8b, 0xff, // !
0xf8, 0x98, 0x98, 0xf8, 0x98, 0x98, 0xf8, // "
0x7c, 0xd7, 0x83, 0x83, 0xd6, 0x83, 0x83, 0xd7, 0x7c, // #
0xff, 0x8b, 0xab, 0x83, 0xab, 0xa3, 0xff, // $
0xf8, 0x88, 0xaf, 0x8b, 0xe7, 0xce, 0xa3, 0xeb, 0x23, 0x3f, // %
0xff, 0x93, 0x83, 0xab, 0x83, 0x97, 0xf3, 0x2b, 0x3f, // &
0xf8, 0x98, 0x98, 0xf8, // '
0x7e, 0xc7, 0x83, 0xbb, 0xff, // (
0xff, 0xbb, 0x83, 0xc7, 0x7e, // )
0x7e, 0xd6, 0x8c, 0x8c, 0xd6, 0x7e, // *
0x3c, 0x2c, 0xef, 0x83, 0x83, 0xef, 0x2c, 0x3c, // +
0xf, 0x3b, 0x23, 0x27, 0x3e, // ,
0x3c, 0x2c, 0x2c, 0x2c, 0x2c, 0x3c, // -
0x1f, 0x13, 0x13, 0x1f, // .
0x1f, 0x33, 0xe3, 0x8f, 0x9c, 0xf8, // /
0xff, 0x83, 0x83, 0xbb, 0x83, 0x83, 0xff, // 0
0xff, 0x83, 0x83, 0xff, // 1
0xff, 0xa3, 0xa3, 0xab, 0x8b, 0x8b, 0xff, // 2
0xef, 0xbb, 0xab, 0xab, 0x83, 0x83, 0xff, // 3
0xfc, 0x8c, 0x8c, 0xef, 0x83, 0x83, 0xff, // 4
0xff, 0x8b, 0x8b, 0xab, 0xa3, 0xa3, 0xff, // 5
0xff, 0x83, 0x83, 0xab, 0xa3, 0xa3, 0xff, // 6
0xf0, 0xb0, 0xb0, 0xbf, 0x83, 0x83, 0xff, // 7
0xff, 0x83, 0x83, 0xab, 0x83, 0x83, 0xff, // 8
0xff, 0x8b, 0x8b, 0xab, 0x83, 0x83, 0xff, // 9
0xff, 0x93, 0x93, 0xff, // :
0xfe, 0x97, 0x93, 0xff, // ;
0x3c, 0x6e, 0xc7, 0x93, 0xbb, 0xef, // <
0x7e, 0x56, 0x56, 0x56, 0x56, 0x7e, // =
0xef, 0xbb, 0x93, 0xc7, 0x6e, 0x3c, // >
0xf8, 0x98, 0x9f, 0xbb, 0xab, 0x8f, 0x9c, 0xf8, // ?
0xff, 0x83, 0x83, 0xbb, 0xab, 0x8b, 0x8b, 0xff, // @
0xff, 0x83, 0x83, 0xae, 0x83, 0x83, 0xff, // A
0xff, 0x83, 0x83, 0xab, 0x83, 0x93, 0xff, // B
0xff, 0x83, 0x83, 0xbb, 0xbb, 0xbb, 0xef, // C
0xff, 0x83, 0x83, 0xbb, 0x83, 0xc7, 0x7e, // D
0xff, 0x83, 0x83, 0xab, 0xab, 0xbb, 0xef, // E
0xff, 0x83, 0x83, 0xaf, 0xac, 0xbc, 0xf0, // F
0xff, 0x83, 0x83, 0xbb, 0xb3, 0xb3, 0xff, // G
0xff, 0x83, 0x83, 0xee, 0x83, 0x83, 0xff, // H
0xff, 0x83, 0x83, 0xff, // I
0x1f, 0x13, 0x13, 0xfb, 0x83, 0x83, 0xff, // J
0xff, 0x83, 0x83, 0xef, 0x83, 0x93, 0xff, // K
0xff, 0x83, 0x83, 0xfb, 0xb, 0xb, 0xf, // L
0xff, 0x83, 0x83, 0xcf, 0x66, 0xcf, 0x83, 0x83, 0xff, // M
0xff, 0x83, 0x83, 0xce, 0xe7, 0x83, 0x83, 0xff, // N
0xff, 0x83, 0x83, 0xbb, 0x83, 0x83, 0xff, // O
0xff, 0x83, 0x83, 0xaf, 0x8c, 0x8c, 0xfc, // P
0xff, 0x83, 0x83, 0xbb, 0x83, 0x83, 0xfb, 0xf, // Q
0xff, 0x83, 0x83, 0xae, 0x83, 0x93, 0xff, // R
0xff, 0x8b, 0x8b, 0xab, 0xa3, 0xa3, 0xff, // S
0xf0, 0xb0, 0xbf, 0x83, 0x83, 0xbf, 0xb0, 0xf0, // T
0xff, 0x83, 0x83, 0xfb, 0x83, 0x83, 0xff, // U
0xfc, 0x8e, 0x87, 0xf3, 0x87, 0x8e, 0xfc, // V
0xff, 0x83, 0x83, 0xe7, 0x4e, 0xe7, 0x83, 0x83, 0xff, // W
0xff, 0x93, 0x83, 0xee, 0x83, 0x93, 0xff, // X
0xf8, 0x9c, 0x8f, 0xe3, 0xe3, 0x8f, 0x9c, 0xf8, // Y
0xff, 0xa3, 0xa3, 0xab, 0x8b, 0x8b, 0xff, // Z
0xff, 0x83, 0x83, 0xbb, 0xff, // [
0xf8, 0x9c, 0x8f, 0xe3, 0x33, 0x1f, // \
0xff, 0xbb, 0x83, 0x83, 0xff, // ]
0x3c, 0x6c, 0xcc, 0x98, 0x98, 0xcc, 0x6c, 0x3c, // ^
0xf, 0xb, 0xb, 0xb, 0xb, 0xf, // _
0xf8, 0x9c, 0x8c, 0xec, 0x3c, // `

]);

const FG_FONT = E.toString([
0x0, 0x0, 0x0, 0x0, //  
0x0, 0x74, 0x74, 0x0, // !
0x0, 0x60, 0x60, 0x0, 0x60, 0x60, 0x0, // "
0x0, 0x28, 0x7c, 0x7c, 0x28, 0x7c, 0x7c, 0x28, 0x0, // #
0x0, 0x74, 0x54, 0x7c, 0x54, 0x5c, 0x0, // $
0x0, 0x70, 0x50, 0x74, 0x18, 0x30, 0x5c, 0x14, 0x1c, 0x0, // %
0x0, 0x6c, 0x7c, 0x54, 0x7c, 0x68, 0xc, 0x14, 0x0, // &
0x0, 0x60, 0x60, 0x0, // '
0x0, 0x38, 0x7c, 0x44, 0x0, // (
0x0, 0x44, 0x7c, 0x38, 0x0, // )
0x0, 0x28, 0x70, 0x70, 0x28, 0x0, // *
0x0, 0x10, 0x10, 0x7c, 0x7c, 0x10, 0x10, 0x0, // +
0x0, 0x4, 0x1c, 0x18, 0x0, // ,
0x0, 0x10, 0x10, 0x10, 0x10, 0x0, // -
0x0, 0xc, 0xc, 0x0, // .
0x0, 0xc, 0x1c, 0x70, 0x60, 0x0, // /
0x0, 0x7c, 0x7c, 0x44, 0x7c, 0x7c, 0x0, // 0
0x0, 0x7c, 0x7c, 0x0, // 1
0x0, 0x5c, 0x5c, 0x54, 0x74, 0x74, 0x0, // 2
0x0, 0x44, 0x54, 0x54, 0x7c, 0x7c, 0x0, // 3
0x0, 0x70, 0x70, 0x10, 0x7c, 0x7c, 0x0, // 4
0x0, 0x74, 0x74, 0x54, 0x5c, 0x5c, 0x0, // 5
0x0, 0x7c, 0x7c, 0x54, 0x5c, 0x5c, 0x0, // 6
0x0, 0x40, 0x40, 0x40, 0x7c, 0x7c, 0x0, // 7
0x0, 0x7c, 0x7c, 0x54, 0x7c, 0x7c, 0x0, // 8
0x0, 0x74, 0x74, 0x54, 0x7c, 0x7c, 0x0, // 9
0x0, 0x6c, 0x6c, 0x0, // :
0x0, 0x68, 0x6c, 0x0, // ;
0x0, 0x10, 0x38, 0x6c, 0x44, 0x0, // <
0x0, 0x28, 0x28, 0x28, 0x28, 0x0, // =
0x0, 0x44, 0x6c, 0x38, 0x10, 0x0, // >
0x0, 0x60, 0x60, 0x44, 0x54, 0x70, 0x60, 0x0, // ?
0x0, 0x7c, 0x7c, 0x44, 0x54, 0x74, 0x74, 0x0, // @
0x0, 0x7c, 0x7c, 0x50, 0x7c, 0x7c, 0x0, // A
0x0, 0x7c, 0x7c, 0x54, 0x7c, 0x6c, 0x0, // B
0x0, 0x7c, 0x7c, 0x44, 0x44, 0x44, 0x0, // C
0x0, 0x7c, 0x7c, 0x44, 0x7c, 0x38, 0x0, // D
0x0, 0x7c, 0x7c, 0x54, 0x54, 0x44, 0x0, // E
0x0, 0x7c, 0x7c, 0x50, 0x50, 0x40, 0x0, // F
0x0, 0x7c, 0x7c, 0x44, 0x4c, 0x4c, 0x0, // G
0x0, 0x7c, 0x7c, 0x10, 0x7c, 0x7c, 0x0, // H
0x0, 0x7c, 0x7c, 0x0, // I
0x0, 0xc, 0xc, 0x4, 0x7c, 0x7c, 0x0, // J
0x0, 0x7c, 0x7c, 0x10, 0x7c, 0x6c, 0x0, // K
0x0, 0x7c, 0x7c, 0x4, 0x4, 0x4, 0x0, // L
0x0, 0x7c, 0x7c, 0x30, 0x18, 0x30, 0x7c, 0x7c, 0x0, // M
0x0, 0x7c, 0x7c, 0x30, 0x18, 0x7c, 0x7c, 0x0, // N
0x0, 0x7c, 0x7c, 0x44, 0x7c, 0x7c, 0x0, // O
0x0, 0x7c, 0x7c, 0x50, 0x70, 0x70, 0x0, // P
0x0, 0x7c, 0x7c, 0x44, 0x7c, 0x7c, 0x4, 0x0, // Q
0x0, 0x7c, 0x7c, 0x50, 0x7c, 0x6c, 0x0, // R
0x0, 0x74, 0x74, 0x54, 0x5c, 0x5c, 0x0, // S
0x0, 0x40, 0x40, 0x7c, 0x7c, 0x40, 0x40, 0x0, // T
0x0, 0x7c, 0x7c, 0x4, 0x7c, 0x7c, 0x0, // U
0x0, 0x70, 0x78, 0xc, 0x78, 0x70, 0x0, // V
0x0, 0x7c, 0x7c, 0x18, 0x30, 0x18, 0x7c, 0x7c, 0x0, // W
0x0, 0x6c, 0x7c, 0x10, 0x7c, 0x6c, 0x0, // X
0x0, 0x60, 0x70, 0x1c, 0x1c, 0x70, 0x60, 0x0, // Y
0x0, 0x5c, 0x5c, 0x54, 0x74, 0x74, 0x0, // Z
0x0, 0x7c, 0x7c, 0x44, 0x0, // [
0x0, 0x60, 0x70, 0x1c, 0xc, 0x0, // \
0x0, 0x44, 0x7c, 0x7c, 0x0, // ]
0x0, 0x10, 0x30, 0x60, 0x60, 0x30, 0x10, 0x0, // ^
0x0, 0x4, 0x4, 0x4, 0x4, 0x0, // _
0x0, 0x60, 0x70, 0x10, 0x0, // `

]);

const WIDTHS = E.toString([4,4,7,9,7,10,9,4,5,5,6,8,5,6,4,6,7,4,7,7,7,7,7,7,7,7,4,4,6,6,6,8,8,7,7,7,7,7,7,7,7,4,7,7,7,9,8,7,7,8,7,7,8,7,7,9,7,8,7,5,6,5,8,6,5,]);

const SCALE = 1;
const ASCII_SPACE_CODE = 32;


const JUSTIFY_LEFT = 0;
const JUSTIFY_RIGHT = 1;
const JUSTIFY_CENTER = 2;

exports.JUSTIFY_LEFT = JUSTIFY_LEFT;
exports.JUSTIFY_RIGHT = JUSTIFY_RIGHT;
exports.JUSTIFY_CENTER = JUSTIFY_CENTER;

exports.render = function(text, x, y, justify) {
  x += GLOBAL_MARGIN_LEFT;
  y += GLOBAL_MARGIN_TOP;

  text = text.toUpperCase();
  //print(`rendering ${text}`);

  x = setposition(text, x, justify);
  for (let i = 0; i < text.length; i++) {
    char = text[i];
    g.setFontCustom(BG_FONT, ASCII_SPACE_CODE, WIDTHS, 8|(SCALE<<8))
     .setColor(0,0,0)
     .drawString(char, x, y)
     .setFontCustom(FG_FONT, ASCII_SPACE_CODE, WIDTHS, 8|(SCALE<<8))
     .setColor(1,1,1)
     .drawString(char, x, y);
     // for 1-pixel kerning
     x += (g.stringWidth(char) - SCALE);
  }
};

function setposition(text, x, justify) {
  if (justify == JUSTIFY_LEFT) {
    return x;
  }
  else if (justify == JUSTIFY_RIGHT) {
    return x - getWidth(text);
  }
  else if (justify == JUSTIFY_CENTER) {
    return x - (getWidth(text)/2);
  }
}

function getWidth(text) {
  return g.setFontCustom(BG_FONT, ASCII_SPACE_CODE, WIDTHS, 8|(SCALE<<8))
          .stringWidth(text) - (SCALE * text.length);
}
